server:
  port: 8130

spring:
  application:
    name: "notification-service"
  config:
    import: "optional:configserver:http://localhost:8071/"
  kafka:
    bootstrap-servers: localhost:9094
    consumer:
      group-id: notification-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
#  cloud:
#    function:
#      definition: email|sms
#    stream:
#      bindings:
#        emailsms-in-0:
#          destination: send-communication
#          group: ${spring.application.name}
##        emailsms-out-0:
##          destination: communication-sent
#  rabbitmq:
#    host: localhost
#    port: 5672
#    username: guest
#    password: guest
#    connection-timeout: 10s


# Mail
brevo:
  api-key: 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

api:
  verify-register: "http://localhost:3000/api/verify?code="

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

endpoints:
  shutdown:
    enabled: true

eureka:
  instance:
    preferIpAddress: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/

logging:
  level:
    com:
      tuananh:
        jobservice: DEBUG
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"